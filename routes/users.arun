var express = require('express');
var router = express.Router();
var mongoose = require("mongoose");
const { enabled } = require('debug');
var maxOptions = { "sort": [['uid',-1]] };

var UserSchema = mongoose.Schema({
  uid:Number,
  userName:String,
  password:String,
  status:Boolean
});

var mongoose_conn_string = "mongodb+srv://akshama:akshama@cluster0-urc6p.mongodb.net/IPL2020";


/* GET users listing. */
router.use('/', function(req, res, next) {

res.header("Access-Control-Allow-Origin", "*");
  res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});


router.get('/:userAction/:userName/:password', function(req, res, next) {
  // Confirm if user if valid user
  // And also password is correct
  var {userAction,userName,password}=req.params;
  userAction = userAction.toLowerCase();
  userName = userName.toLowerCase().replace(/\s/g, "");

  
  mongoose.connect(mongoose_conn_string, { useNewUrlParser: true, useUnifiedTopology: true }, function() {
      //console.log("MongoDB database connection established successfully");
    let User;

    // compile schema to model
    try{ User = mongoose.model("users", UserSchema);}
    catch(err){
      User=mongoose.model("users")
    }

    User.findOne({userName},(err,resu)=>{
      switch(userAction)
      {
        case "login":
          if ((resu != null) && (resu.password == password))
            sendok(res, "login success");
          else
            senderr(res, "Incorrect User Name or Password");
          break;
        case "signup":
          if(resu)
            senderr(res, "User " + userName + " already exists");
          else {
            var uid=0;
            var query = User.find();
            query.limit(1);
            query.sort({"uid":-1})
            query.limit(1).sort({"uid":-1}).exec(function (err, doc) {
              if (err) senderr(res, err);
              else
              {
                uid = doc[0].uid + 1;
                var user1 = new User({ uid: uid,
                userName: userName,
                password: password,
                status: true });
                console.log(user1);
                //User.insertMany(user1);
                user1.save(function(err) {
                  if (err) senderr(res, "Could add new record");
                  else sendok(res, "Added new user " + user1.userName);
                });
              };
            });
          }
          break;
        case "reset":
          if(resu){
            resu.password = password;
            resu.save(function(err) {
              console.log(err);
              if (err) senderr(res, "Could not reset password");
              else sendok(res,"Password updated for user " + userName);
            });
          }
          else 
            senderr(res, "Invalid user");
          break;
        default:
          senderr(res, "Invalid User Option");
          break;
      }
    });
  });
});


router.post('/', function(req, res, next) {
  //console.log(req.body)
  // get user name and password
  const{userName,password}=req.body;
  console.log("User name = "+userName+", password is "+password);
mongoose.connect(mongoose_conn_string, { useNewUrlParser: true, useUnifiedTopology: true }, function() {
    console.log("MongoDB database connection established successfully");
    
  let User;

  // compile schema to model
  try{ User = mongoose.model("users", UserSchema);}
  catch(err){
    User=mongoose.model("users")
  }
  User.insertMany([{userName,password}])
    res.send("User name = "+userName+", password is "+password);
  })
 
});


function senderr(res, msg)
{
  res.status(400).send(msg);
}

function sendok(res, msg)
{
  res.send(msg);
}

module.exports = router;
