import React, { useEffect, useState } from 'react';
import axios from "axios";
import Grid from "@material-ui/core/Grid";
import Table from "components/Table/Table.js";
import GridItem from "components/Grid/GridItem.js";
import Accordion from '@material-ui/core/Accordion';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import Typography from '@material-ui/core/Typography';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import { makeStyles } from '@material-ui/core/styles';
// import styles from "assets/jss/material-dashboard-react/views/dashboardStyle.js";
import { DisplayPageHeader } from 'CustomComponents/CustomComponents.js';
import { hasGroup, cricDate, cricTeamName} from "views/functions.js";

const useStyles = makeStyles((theme) => ({
    root: {
      width: '100%',
    },
    heading: {
      fontSize: theme.typography.pxToRem(15),
      fontWeight: theme.typography.fontWeightRegular,
    },
  }));
  

export default function MatchInfo() { 
  const classes = useStyles();
  const [tournamentArray, setTournamentArray] = useState([]);

  useEffect(() => {  
    const fetchTournament = async () => {
      try {
          var response = await axios.get(`/tournament/tournament`);
          setTournamentArray(response.data);
      } catch (e) {
          console.log(e)
      }
    }
    fetchTournament();
  }, []);



  const [expandedPanel, setExpandedPanel] = useState(false);
  const handleAccordionChange = (panel) => (event, isExpanded) => {
    setExpandedPanel(isExpanded ? panel : false); 
  };

  function ShowTournaments() {  
      return (tournamentArray.map(ttt =>
      <Accordion expanded={expandedPanel === ttt.tournament} onChange={handleAccordionChange(ttt.tournament)}>
          <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls="panel1a-content" id="panel1a-header">
      <Typography className={classes.heading}>{ttt.tournament}   ({ttt.type} - Total: {ttt.matches.length}  Status: {ttt.status})</Typography>
          </AccordionSummary> 
          <AccordionDetails>
              <Grid container justify="center" alignItems="center" >
                  <GridItem xs={12} sm={12} md={12} lg={12} >
                      <Table
                          tableHeaderColor="warning"
                          tableHead={["Team1", "Team2", "Time"]}
                          tableData={ttt.matches.map(mmm => {
                              const arr = [mmm.team1, mmm.team2, mmm.matchStartTime]
                              return { data: arr, collapse: [] }
                          })}
                      />
                  </GridItem>
              </Grid>
          </AccordionDetails>
      </Accordion>
      ))
  }

  let myGrp = "";
  let myTrn = "";
  if (hasGroup()) {
    myGrp = localStorage.getItem("groupName");
    myTrn = localStorage.getItem("tournament");
  }
  return (
    <div className={classes.root}>
      <DisplayPageHeader headerName="Tournaments" groupName={myGrp} tournament={myTrn}/>
      <ShowTournaments/>
    </div>
  );
};


